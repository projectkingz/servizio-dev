{"ast":null,"code":"/*!\n * The Final Countdown for jQuery v2.2.0 (http://hilios.github.io/jQuery.countdown/)\n * Copyright (c) 2016 Edson Hilios\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy of\n * this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to\n * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n * the Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n(function (factory) {\n  \"use strict\";\n\n  if (typeof define === \"function\" && define.amd) {\n    define([\"jquery\"], factory);\n  } else {\n    factory(jQuery);\n  }\n})(function ($) {\n  \"use strict\";\n\n  var instances = [],\n      matchers = [],\n      defaultOptions = {\n    precision: 100,\n    elapse: false,\n    defer: false\n  };\n  matchers.push(/^[0-9]*$/.source);\n  matchers.push(/([0-9]{1,2}\\/){2}[0-9]{4}( [0-9]{1,2}(:[0-9]{2}){2})?/.source);\n  matchers.push(/[0-9]{4}([\\/\\-][0-9]{1,2}){2}( [0-9]{1,2}(:[0-9]{2}){2})?/.source);\n  matchers = new RegExp(matchers.join(\"|\"));\n\n  function parseDateString(dateString) {\n    if (dateString instanceof Date) {\n      return dateString;\n    }\n\n    if (String(dateString).match(matchers)) {\n      if (String(dateString).match(/^[0-9]*$/)) {\n        dateString = Number(dateString);\n      }\n\n      if (String(dateString).match(/\\-/)) {\n        dateString = String(dateString).replace(/\\-/g, \"/\");\n      }\n\n      return new Date(dateString);\n    } else {\n      throw new Error(\"Couldn't cast `\" + dateString + \"` to a date object.\");\n    }\n  }\n\n  var DIRECTIVE_KEY_MAP = {\n    Y: \"years\",\n    m: \"months\",\n    n: \"daysToMonth\",\n    d: \"daysToWeek\",\n    w: \"weeks\",\n    W: \"weeksToMonth\",\n    H: \"hours\",\n    M: \"minutes\",\n    S: \"seconds\",\n    D: \"totalDays\",\n    I: \"totalHours\",\n    N: \"totalMinutes\",\n    T: \"totalSeconds\"\n  };\n\n  function escapedRegExp(str) {\n    var sanitize = str.toString().replace(/([.?*+^$[\\]\\\\(){}|-])/g, \"\\\\$1\");\n    return new RegExp(sanitize);\n  }\n\n  function strftime(offsetObject) {\n    return function (format) {\n      var directives = format.match(/%(-|!)?[A-Z]{1}(:[^;]+;)?/gi);\n\n      if (directives) {\n        for (var i = 0, len = directives.length; i < len; ++i) {\n          var directive = directives[i].match(/%(-|!)?([a-zA-Z]{1})(:[^;]+;)?/),\n              regexp = escapedRegExp(directive[0]),\n              modifier = directive[1] || \"\",\n              plural = directive[3] || \"\",\n              value = null;\n          directive = directive[2];\n\n          if (DIRECTIVE_KEY_MAP.hasOwnProperty(directive)) {\n            value = DIRECTIVE_KEY_MAP[directive];\n            value = Number(offsetObject[value]);\n          }\n\n          if (value !== null) {\n            if (modifier === \"!\") {\n              value = pluralize(plural, value);\n            }\n\n            if (modifier === \"\") {\n              if (value < 10) {\n                value = \"0\" + value.toString();\n              }\n            }\n\n            format = format.replace(regexp, value.toString());\n          }\n        }\n      }\n\n      format = format.replace(/%%/, \"%\");\n      return format;\n    };\n  }\n\n  function pluralize(format, count) {\n    var plural = \"s\",\n        singular = \"\";\n\n    if (format) {\n      format = format.replace(/(:|;|\\s)/gi, \"\").split(/\\,/);\n\n      if (format.length === 1) {\n        plural = format[0];\n      } else {\n        singular = format[0];\n        plural = format[1];\n      }\n    }\n\n    if (Math.abs(count) > 1) {\n      return plural;\n    } else {\n      return singular;\n    }\n  }\n\n  var Countdown = function Countdown(el, finalDate, options) {\n    this.el = el;\n    this.$el = $(el);\n    this.interval = null;\n    this.offset = {};\n    this.options = $.extend({}, defaultOptions);\n    this.instanceNumber = instances.length;\n    instances.push(this);\n    this.$el.data(\"countdown-instance\", this.instanceNumber);\n\n    if (options) {\n      if (typeof options === \"function\") {\n        this.$el.on(\"update.countdown\", options);\n        this.$el.on(\"stoped.countdown\", options);\n        this.$el.on(\"finish.countdown\", options);\n      } else {\n        this.options = $.extend({}, defaultOptions, options);\n      }\n    }\n\n    this.setFinalDate(finalDate);\n\n    if (this.options.defer === false) {\n      this.start();\n    }\n  };\n\n  $.extend(Countdown.prototype, {\n    start: function start() {\n      if (this.interval !== null) {\n        clearInterval(this.interval);\n      }\n\n      var self = this;\n      this.update();\n      this.interval = setInterval(function () {\n        self.update.call(self);\n      }, this.options.precision);\n    },\n    stop: function stop() {\n      clearInterval(this.interval);\n      this.interval = null;\n      this.dispatchEvent(\"stoped\");\n    },\n    toggle: function toggle() {\n      if (this.interval) {\n        this.stop();\n      } else {\n        this.start();\n      }\n    },\n    pause: function pause() {\n      this.stop();\n    },\n    resume: function resume() {\n      this.start();\n    },\n    remove: function remove() {\n      this.stop.call(this);\n      instances[this.instanceNumber] = null;\n      delete this.$el.data().countdownInstance;\n    },\n    setFinalDate: function setFinalDate(value) {\n      this.finalDate = parseDateString(value);\n    },\n    update: function update() {\n      if (this.$el.closest(\"html\").length === 0) {\n        this.remove();\n        return;\n      }\n\n      var hasEventsAttached = $._data(this.el, \"events\") !== undefined,\n          now = new Date(),\n          newTotalSecsLeft;\n      newTotalSecsLeft = this.finalDate.getTime() - now.getTime();\n      newTotalSecsLeft = Math.ceil(newTotalSecsLeft / 1e3);\n      newTotalSecsLeft = !this.options.elapse && newTotalSecsLeft < 0 ? 0 : Math.abs(newTotalSecsLeft);\n\n      if (this.totalSecsLeft === newTotalSecsLeft || !hasEventsAttached) {\n        return;\n      } else {\n        this.totalSecsLeft = newTotalSecsLeft;\n      }\n\n      this.elapsed = now >= this.finalDate;\n      this.offset = {\n        seconds: this.totalSecsLeft % 60,\n        minutes: Math.floor(this.totalSecsLeft / 60) % 60,\n        hours: Math.floor(this.totalSecsLeft / 60 / 60) % 24,\n        days: Math.floor(this.totalSecsLeft / 60 / 60 / 24) % 7,\n        daysToWeek: Math.floor(this.totalSecsLeft / 60 / 60 / 24) % 7,\n        daysToMonth: Math.floor(this.totalSecsLeft / 60 / 60 / 24 % 30.4368),\n        weeks: Math.floor(this.totalSecsLeft / 60 / 60 / 24 / 7),\n        weeksToMonth: Math.floor(this.totalSecsLeft / 60 / 60 / 24 / 7) % 4,\n        months: Math.floor(this.totalSecsLeft / 60 / 60 / 24 / 30.4368),\n        years: Math.abs(this.finalDate.getFullYear() - now.getFullYear()),\n        totalDays: Math.floor(this.totalSecsLeft / 60 / 60 / 24),\n        totalHours: Math.floor(this.totalSecsLeft / 60 / 60),\n        totalMinutes: Math.floor(this.totalSecsLeft / 60),\n        totalSeconds: this.totalSecsLeft\n      };\n\n      if (!this.options.elapse && this.totalSecsLeft === 0) {\n        this.stop();\n        this.dispatchEvent(\"finish\");\n      } else {\n        this.dispatchEvent(\"update\");\n      }\n    },\n    dispatchEvent: function dispatchEvent(eventName) {\n      var event = $.Event(eventName + \".countdown\");\n      event.finalDate = this.finalDate;\n      event.elapsed = this.elapsed;\n      event.offset = $.extend({}, this.offset);\n      event.strftime = strftime(this.offset);\n      this.$el.trigger(event);\n    }\n  });\n\n  $.fn.countdown = function () {\n    var argumentsArray = Array.prototype.slice.call(arguments, 0);\n    return this.each(function () {\n      var instanceNumber = $(this).data(\"countdown-instance\");\n\n      if (instanceNumber !== undefined) {\n        var instance = instances[instanceNumber],\n            method = argumentsArray[0];\n\n        if (Countdown.prototype.hasOwnProperty(method)) {\n          instance[method].apply(instance, argumentsArray.slice(1));\n        } else if (String(method).match(/^[$A-Z_][0-9A-Z_$]*$/i) === null) {\n          instance.setFinalDate.call(instance, method);\n          instance.start();\n        } else {\n          $.error(\"Method %s does not exist on jQuery.countdown\".replace(/\\%s/gi, method));\n        }\n      } else {\n        new Countdown(this, argumentsArray[0], argumentsArray[1]);\n      }\n    });\n  };\n});","map":null,"metadata":{},"sourceType":"module"}